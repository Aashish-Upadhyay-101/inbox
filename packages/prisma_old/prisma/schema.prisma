// Prisma Config

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth STUFFS

model Account {
  id                  String        @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?       @db.Text
  access_token        String?       @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?       @db.Text
  session_state       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                  String        @id @default(cuid())
  sessionToken        String        @unique
  userId              String
  expires             DateTime
  
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String?       @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  orgs                MembersInOrgs[]
  addresses           MembersInAddress[]
}

model VerificationToken {
  identifier          String
  token               String        @unique
  expires             DateTime

  @@unique([identifier, token])
}

// Org STUFFS

model Org {
  id                  String          @id @default(cuid())
  createdAt           DateTime        @default(now())
  name                String
  slug                String          @unique
  domains             Domains[]
  members             MembersInOrgs[]
}

enum MembersInOrgsRole {
  OWNER
  ADMIN
  MEMBER
}

model MembersInOrgs {
  createdAt           DateTime        @default(now())
  orgId               String
  userId              String
  role                MembersInOrgsRole
  
  org                 Org             @relation(fields: [orgId], references: [id])
  user                User            @relation(fields: [userId], references: [id])
  
  @@id([orgId, userId])
}

model Domains {
  id                  String          @id @default(cuid())
  createdAt           DateTime        @default(now())
  domain              String          @unique
  orgId               String
  addresses           Address[]
  dkim                String?
  dnsPass             Boolean         @default(false)
  lastChecked         DateTime
  failCode            String?
  failCount           Int             @default(0)
  
  org                 Org             @relation(fields: [orgId], references: [id])
}

// Mail STUFFS

model Address {
  id                  String          @id @default(cuid())
  createdAt           DateTime        @default(now())
  createdBy           String
  username            String       // AKA "Local Part" - the bit before the @
  domain              String
  nickname            String
  sendName            String
  groupBySender       Boolean         @default(true)
  members             MembersInAddress[]
  convos              Convo[]
  convoEvents         ConvoEvent[]
  miscMails           MiscMail[]
  externalSenders     ExternalSender[]

  domainObj           Domains         @relation(fields: [domain], references: [domain])

  @@unique([username, domain])
}

model MembersInAddress {
  createdAt           DateTime        @default(now())
  addressId           String
  userId              String
  autoMute            Boolean         @default(false)
  
  address             Address         @relation(fields: [addressId], references: [id])
  user                User            @relation(fields: [userId], references: [id])

  @@unique([addressId, userId])
}

model ExternalSender {
  id                  String          @id @default(cuid())
  createdAt           DateTime        @default(now())
  domain              String
  username            String
  sendName            String
  signature           String
  signatureHtml       String
  convos              Convo[]
  convoEvents         ConvoEvent[]
  toAddress           String
  
  address             Address         @relation(fields: [toAddress], references: [id])

  @@unique([username, domain])
}



model Convo {
  id                 String            @id @default(cuid())
  createdAt          DateTime          @default(now())
  lastMessageAt      DateTime
  internalMembers    Address[]
  externalMembers    ExternalSender[]
  subject            String
  convoEvents        ConvoEvent[]
  smtpRefIds         String[]
}

enum ConvoEventAuthor {
  INTERNAL
  EXTERNAL
}

enum ConvoEventStatus {
  QUEUED
  PROCESSING
  COMPLETE
}

model ConvoEvent {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  convoId     String
  authorType  ConvoEventAuthor
  authorIntId String
  authorExtId String
  status      ConvoEventStatus
  message     String
  tldr        String
  rawMailId   String           @unique
  convo       Convo            @relation(fields: [convoId], references: [id])
  authorInt   Address          @relation(fields: [authorIntId], references: [id])
  authorExt   ExternalSender  @relation(fields: [authorExtId], references: [id])
  rawMail     RawMail          @relation(fields: [rawMailId], references: [id])
}

model RawMail {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  fromAddress String
  fromName    String
  to          String
  subject     String
  raw         String
  messageId   String
  inReplyTo   String
  html        String
  text        String

  ConvoEvent ConvoEvent?
  MiscMail   MiscMail?
}

enum MiscMailTypes {
  CODE
  SECURITY
  ORDER
  NEWSLETTER
  PROMOTION
  MARKETING
  SOCIAL
  UPDATE
  FINANCE
  SPAM
}

model MiscMail {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  fromAddress     String
  fromName        String
  unread          Boolean       @default(true)
  toId            String
  subject         String
  rawMailId       String        @unique
  type            MiscMailTypes
  parsedData      Json
  parsingTemplate String
  to              Address       @relation(fields: [toId], references: [id])
  rawMail         RawMail       @relation(fields: [rawMailId], references: [id])
}
